#!/bin/bash

# Usage:
#   git clean-branches      # removes all merged local branches
#   git clean-branches -r   # removes all merged local & remote branches
#
function git_clean_branches {
    current_branch="$(git branch --no-color 2> /dev/null |\
        sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"

    if [ "$current_branch" != "master" ]; then
        echo "WARNING: You are on branch $current_branch, NOT master."
    fi
    echo "Fetching merged branches..."

    git remote prune origin
    remote_branches=$(git branch -r --merged |\
        grep -v '/master$' | grep -v 'production$' | grep -v "/$current_branch$")
    local_branches=$(git branch --merged |\
        grep -v 'master$' | grep -v 'production$' | grep -v "$current_branch$")

    if [ -z "$remote_branches" ] && [ -z "$local_branches" ]; then
        echo "No existing branches have been merged into $current_branch."

    else
        echo "This will remove the following branches:"
        if [[ "$1" == '-r' ]]; then
            if [ -n "$remote_branches" ]; then
                echo "$remote_branches"
            fi
        fi
        if [ -n "$local_branches" ]; then
            echo "$local_branches"
        fi
        read -p "Continue? (y/n): " -n 1 choice
        echo
        if [ "$choice" == "y" ] || [ "$choice" == "Y" ]; then
            if [[ "$1" == '-r' ]]; then
                # Remove remote branches
                git push origin $(git branch -r --merged |\
                    grep -v '/master$' | grep -v "/$current_branch$" |\
                    sed 's/origin\//:/g' | tr -d '\n')
            fi
            # Remove local branches
            git branch -d $(git branch --merged | grep -v 'master$' |\
                grep -v "$current_branch$" | sed 's/origin\///g' | tr -d '\n')
        else
            echo "No branches removed."
        fi
    fi
}

git_clean_branches "$@"
